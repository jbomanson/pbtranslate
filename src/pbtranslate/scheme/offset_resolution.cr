require "../level_tracking/scheme"
require "../network/offset_resolution"
require "../scheme"

# :nodoc:
class PBTranslate::Scheme::OffsetResolution(S)
  include Scheme

  module ::PBTranslate::Scheme
    # Creates a version of this scheme with any `Offset`s resolved away, so that
    # a visitor of networks of the returned scheme do not need to to implement
    # *#visit_region* for `Offset` arguments.
    #
    # Networks generated by this scheme are allowed issue *#visit_region* calls
    # with `Offset` arguments on visitors.
    # The returned scheme will generate networks in which these regions have
    # been flattened away and the offsets applied to gates within the regions.
    def to_scheme_with_offset_resolution : Scheme
      OffsetResolution.new(self)
    end
  end

  delegate gate_options, to: @scheme

  def initialize(@scheme : S)
  end

  def network(width : Width)
    Network::OffsetResolution.new(@scheme.network(width))
  end

  def to_scheme_with_gate_level
    @scheme.to_scheme_with_gate_level do |without|
      OffsetResolution.new(without).to_scheme_with_gate_level_added
    end
  end
end
